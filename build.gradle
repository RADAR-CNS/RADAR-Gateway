buildscript {
    ext.kotlinVersion = '1.1.4-3'
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'war'
    id "org.jetbrains.kotlin.jvm" version '1.1.4-3'
    id 'org.akhikhl.gretty' version '1.4.2'
}

apply plugin: 'org.junit.platform.gradle.plugin'

group 'org.radarcns'
version '1.0-SNAPSHOT'

ext.githubRepoName = 'RADAR-CNS/RADAR-Gateway'
ext.githubUrl = 'https://github.com/' + githubRepoName + '.git'
ext.issueUrl = 'https://github.com/' + githubRepoName + '/issues'
ext.website = 'http://radar-cns.org'
ext.description = 'RADAR Gateway to handle secured data flow to backend.'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.junitVersion = '5.0.1'
ext.httpProxyVersion = '1.9'
ext.okhttp3Version = '3.9.0'

repositories {
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/libs-snapshot/' }
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'SECONDS'
}

dependencies {
    compile group: 'org.mitre.dsmiley.httpproxy' , name: 'smiley-http-proxy-servlet' , version: httpProxyVersion
    compile group: 'javax.servlet' , name: 'servlet-api' , version: '2.4'
    compile group: 'org.radarcns', name: 'radar-auth', version: '0.1-SNAPSHOT', changing: true
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttp3Version

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: okhttp3Version
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jre8', version: kotlinVersion
}

//---------------------------------------------------------------------------//
// Dependencies                                                              //
//---------------------------------------------------------------------------//

ext.pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'nivemaham'
            name 'Nivethika Mahasivam'
            email 'nivethika@thehyve.nl'
            organization 'The Hyve'
        }
    }
    issueManagement {
        system 'GitHub'
        url githubUrl + '/issues'
    }
    organization {
        name 'RADAR-CNS'
        url website
    }
    scm {
        connection 'scm:git:' + githubUrl
        url githubUrl
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

idea {
    module {
        downloadSources = true
    }
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//

checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures true

    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
}

pmd {
    // codacy version
    toolVersion = '5.5.2'
    ignoreFailures = true
    sourceSets = [sourceSets.main]

    consoleOutput = true

    ruleSets = []
    ruleSetFiles = files(rootProject.file("config/pmd/ruleset.xml"))
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//

tasks.matching { it instanceof Test }.all {
    def stdout = new LinkedList<String>()
    beforeTest { TestDescriptor td ->
        stdout.clear()
    }

    onOutput { TestDescriptor td, TestOutputEvent toe ->
        stdout.addAll(toe.getMessage().split('(?m)$'))
        while (stdout.size() > 100) {
            stdout.remove()
        }
    }

    afterTest { TestDescriptor td, TestResult tr ->
        if (tr.resultType == TestResult.ResultType.FAILURE) {
            println()
            print("${td.className}.${td.name} FAILED")
            if (stdout.empty) {
                println(" without any output")
            } else {
                println(" with last 100 lines of output:")
                println('=' * 100)
                stdout.each { print(it) }
                println('=' * 100)
            }
        }
    }

    testLogging {
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat "full"
    }
}

project.afterEvaluate {
    task downloadDependencies(type: Exec) {
        configurations.testRuntime.files
        commandLine 'echo', 'Downloaded all dependencies'
    }
}

//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//

ext.sharedManifest = manifest {
    attributes("Implementation-Title": rootProject.name,
            "Implementation-Version": version)
}

war {
    archiveName = "${rootProject.name}.war"
    manifest.from sharedManifest
}


task wrapper(type: Wrapper) {
    gradleVersion '4.1'
    distributionType 'all'
}
